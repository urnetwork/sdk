name: Build Release

permissions:
  contents: write

on:
  workflow_dispatch: # Allows manual triggering
  schedule:
    # Run daily at 11:00 AM Pacific Time (Standard Time: 19:00 UTC, DST: 18:00 UTC)
    - cron: "0 19 * * *" # Update to '0 18 * * *' during DST if needed

jobs:
  build_aar:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: "0"
          fetch-tags: "true"

      - uses: actions/setup-go@v5
        with:
          go-version: "1.23.3"

      - name: fix go mod
        run: |
          go mod edit -dropreplace github.com/urnetwork/connect@v0.0.0
          go mod edit -dropreplace github.com/urnetwork/protocol@v0.0.0
          go mod edit -dropreplace github.com/urnetwork/userwireguard@v0.0.0

          go mod edit -require github.com/urnetwork/connect@latest -require github.com/urnetwork/protocol@latest -require github.com/urnetwork/userwireguard@latest
          go mod tidy

      - name: Install semver-release
        run: go install github.com/urnetwork/semver-release@v0.0.8

      - name: Check if release is needed
        id: release_needed
        run: |
          echo "RELEASE_NEEDED=$(semver-release release-needed)" >> "$GITHUB_OUTPUT"

      - name: Set up JDK 21
        if: ${{ steps.release_needed.outputs.RELEASE_NEEDED == 'true'}}
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "zulu"

      - name: Setup Android SDK
        if: ${{ steps.release_needed.outputs.RELEASE_NEEDED == 'true'}}
        uses: android-actions/setup-android@v3

      - name: build patched go
        if: ${{ steps.release_needed.outputs.RELEASE_NEEDED == 'true'}}
        run: |
          git config --global user.email "build@ur.io"
          git config --global user.name "Urnetrwork Build"

          git clone https://go.googlesource.com/go gosource
          cd gosource
          git checkout -b patched-1.23.3 go1.23.3
          git revert -n 3560cf0afb3c29300a6c88ccd98256949ca7a6f6
          cd src
          ./make.bash
          cd ..
          ls -laR bin
          go version
          set -x
          cp ./bin/go "$(which go)"
          go version
          cd ..
          rm -rf gosource

      - name: install gomobile
        if: ${{ steps.release_needed.outputs.RELEASE_NEEDED == 'true'}}
        run: go install golang.org/x/mobile/cmd/...@latest

      - name: build
        if: ${{ steps.release_needed.outputs.RELEASE_NEEDED == 'true'}}
        run: |
          mkdir -p build/android
          gomobile bind \
            -target=android/arm64,android/arm,android/amd64 -androidapi 24 \
            -javapkg com.bringyour \
            -trimpath \
            -gcflags="-dwarf=true" \
            -ldflags="-X client.Version="1.2.3" -compressdwarf=false -B gobuildid" \
            -o build/android/URnetworkSdk.aar \
            github.com/urnetwork/sdk

      - name: validate
        if: ${{ steps.release_needed.outputs.RELEASE_NEEDED == 'true'}}
        run: |
          cd build/android
          mkdir validate

          cp URnetworkSdk-sources.jar validate/
          cd validate
          jar -xf URnetworkSdk-sources.jar
          set -x
          bad_exports="$(grep -Ri '// skipped' . || echo -n)"
          if [[ "$bad_exports" ]]; then
              echo "Some types could not be exported:"
              echo "$bad_exports"
              exit 1
          fi

      - name: Create Release
        if: ${{ steps.release_needed.outputs.RELEASE_NEEDED == 'true'}}
        id: create-release
        run: |
          PREVIOUS_RELEASE="$($HOME/go/bin/semver-release latest .)"
          $HOME/go/bin/semver-release release
          git push origin --tags
          CURRENT_RELEASE="$($HOME/go/bin/semver-release latest .)"

          set -x
          echo "## Release Commits `v$PREVIOUS_RELEASE`..`v$CURRENT_RELEASE`" > ../release-commits.md
          git log "v$PREVIOUS_RELEASE".."v$CURRENT_RELEASE^" --oneline | sed 's/^/- /' -  >> ../release-commits.md

          echo "version=$($HOME/go/bin/semver-release latest .)" >> "$GITHUB_OUTPUT"
          ls -la build/android

      - name: Create Github Release
        if: ${{ steps.release_needed.outputs.RELEASE_NEEDED == 'true'}}
        uses: "comnoco/create-release-action@v2"
        with:
          tag_name: v${{steps.create-release.outputs.version}}
          release_name: Release ${{steps.create-release.outputs.version}}
          body_path: release-commits.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload aar to github release
        if: ${{ steps.release_needed.outputs.RELEASE_NEEDED == 'true'}}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/android/*
          file_glob: true
          # asset_name: URnetworkSdk.aar
          tag: v${{steps.create-release.outputs.version}}
          overwrite: true
